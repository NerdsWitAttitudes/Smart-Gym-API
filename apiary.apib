# SmartGym

This documentation describes all endpoints in the SmartGym API. All endpoints require an authentication token unless explicitely noted.


# Group OAuth

Some requests like the checkin of devices requires the requesting client to be authenticated. This is done using the
OAuth 2 [client credentials grant](https://tools.ietf.org/html/rfc6749#section-4.4). This is implemented according to [RFC 6749](https://tools.ietf.org/html/rfc6749).

## Manage clients [/oauth/client]
### Create a client [POST]

Create a client to be used with OAuth 2. This endpoint requires the user to be an administrator and
will therefore not be available to default users. Note the client_secret will only be shown once and cannot be retrieved again.

`client_type` should be either "public" or "confidential" as described [here](https://tools.ietf.org/html/rfc6749#section-2.1)

+ Request (application/json)

        {
            "name": "Example descriptive name",
            "client_type": "public"
        }
        
+ Response 201(application/json)

        {
            "client_id": "00000000-0000-0000-0000-000000000000",
            "client_secret": "0000000000000000000000000000000000000000000000000000000000000000"
        }

## Manage access tokens [oauth/token]
### Request a token [POST]

Request an access token to be used with OAuth 2. This request requires valid client credentials in the
`Authorization` header.

+ Request (application/json)

    + Headers
    
            Authorization: Basic <base64 encoded client_id:client_secret>

        
+ Response 200(application/json)

        {
            "access_token": "0000000000000000000000000000000000000000000000000000000000000000",
            "expires_in" 3600,
            "token_type": "Bearer"
        }

# Group Authentication

Endpoints related to user authentication.

## Login a user [/auth/login]
### Login [POST]

Logs in a registered user based on email address and password. Does not require an authentication token.

+ Request (application/json)

        {
            "email": "example@email.com",
            "password": "examplepassword123"
        }

+ Response 200

    + Headers
    
            Set-Cookie: exampleauthenticationcookie


## Logout a user [/auth/logout]
### Logout [POST]

Logs out the user based on the authentication cookie.

+ Request (application/json)

    + Headers
    
            Set-Cookie: exampleauthcookie

+ Response 200


# Group Users

Endpoints related to users.

## Manage users [/user]
### Get users [GET]

Retrieve all users.

+ Response 200(application/json)

        [{
            "id": "00000000-0000-0000-0000-000000000000",
            "email": "example@email.com",
            "first_name": "example",
            "last_name": "name",
            "date_created": "",
            "date_updated": "",
            "country": "The Netherlands",
            "date_of_birth": "",
            "last_login": ""
        },
        {
            "id": "00000000-0000-0000-0000-000000000000",
            "email": "example2@email.com",
            "first_name": "other",
            "last_name": "name",
            "date_created": "",
            "date_updated": "",
            "country": "The Netherlands",
            "date_of_birth": "",
            "last_login": ""
        }]

### Create a user [POST]

Create a new user. Does not require an authentication token.

+ Request (application/json)

        {
            "email": "example@email.com",
            "password": "example password",
            "password_confirm": "example password confirm",
            "first_name": "example",
            "last_name": "name",
            "country": "The Netherlands",
            "date_of_birth": ""
        }

+ Response 200


## Manage a user for a given id [/user/{user_id}]
+ Parameters
    + user_id: `00000000-0000-0000-0000-000000000000` (UUID) - The ID of a user.
    
### Get a user [GET]

Retrieve a user.

+ Response 200(application/json)

        {
            "id": "00000000-0000-0000-0000-000000000000",
            "email": "example@email.com",
            "first_name": "example",
            "last_name": "name",
            "date_created": "",
            "date_updated": "",
            "country": "The Netherlands",
            "date_of_birth": "",
            "last_login": ""
        }
        
### Delete a user [DELETE]

Delete a user.

+ Response 200(application/json)

### Update a user [PUT]

Update a user.

+ Request (application/json)

        {
            "email": "example@email.com",
            "first_name": "example",
            "last_name": "name",
            "country": "The Netherlands",
            "date_of_birth": ""
        }

+ response 200(application/json)

# Group Devices
## Checkin / Checkout [/device/checkin]
### Checkin [POST]

Check a user in or out of their gym using their bluetooth enabled device. Does not require an authentication token.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer 0000000000000000000000000000000000000000000000000000000000000000

    + Body
    
            {
                "name": "Example name",
                "device_address": "00:00:00:00:00:00",
                "device_class": "00000",
                "client_address": "00:00:00:00:00:00"
            }
    
+ Response 200

## Manage devices [/device]
### Get devices [GET]

Retrieve all devices of the user.

+ Response 200 (application/json)

        [{
            "name": "Example name",
            "device_address": "00:00:00:00:00:00",
            "device_class": "00000",
            "client_address": "00:00:00:00:00:00"
        },
        {
            "name": "Other example",
            "device_address": "00:00:00:00:00:00",
            "device_class": "00000",
            "client_address": "00:00:00:00:00:00"
        }]
    
### Create a device [POST]

Create a new device for the user.

+ Request (application/json)

        {
            "name": "Example name",
            "device_address": "00:00:00:00:00:00",
            "device_class": "00000",
            "client_address": "00:00:00:00:00:00"
        }

+ Response 200
    
## Manage a device for a given id [/device/{device_id}]
+ Parameters
    + device_id: `00000000-0000-0000-0000-000000000000` (UUID) - The ID of a device.

### Delete a device [DELETE]

Delete a user's device making it impossible to check in using this device.

+ Response 200

# Group Busyness
## Get past busyness [/busyness/past]
### Past [GET]
Get the busyness for a specific date in the past

+ Parameters
    + date: '2016-05-10' (DATE) - The date you want to know the busyness for

+ Response 200

        {
            "2016-05-10T00:00:00": 1,
            "2016-05-10T01:00:00": 3,
            "2016-05-10T03:00:00": 3,
            "2016-05-10T08:00:00": 6,
            "2016-05-10T10:00:00": 2,
            "2016-05-10T12:00:00": 5,
            "2016-05-10T13:00:00": 9,
            "2016-05-10T14:00:00": 12,
        }
    


## Get today's busyness [/busyness/today]
### Today [GET]

Get the busyness for today

+ Response 200

        {
            "2016-05-10T00:00:00": 1,
            "2016-05-10T01:00:00": 3,
            "2016-05-10T03:00:00": 3,
            "2016-05-10T08:00:00": 6,
            "2016-05-10T10:00:00": 2,
            "2016-05-10T12:00:00": 5,
            "2016-05-10T13:00:00": 9,
            "2016-05-10T14:00:00": 12,
        }
    
## predict busyness [/busyness/predict]
### predict [GET]

Get the busyness for a specific date in the future (max 5 days from now) 

+ Parameters
    + date: '2016-05-10' (DATE) - The date you want to know the busyness for
    

+ Response 200 

        {
            "2016-05-10T00:00:00": 1,
            "2016-05-10T01:00:00": 3,
            "2016-05-10T03:00:00": 3,
            "2016-05-10T08:00:00": 6,
            "2016-05-10T10:00:00": 2,
            "2016-05-10T12:00:00": 5,
            "2016-05-10T13:00:00": 9,
            "2016-05-10T14:00:00": 12,
        }
        
# Group Sport Schedules
## Get schedules [/sport_schedule]
### Get sport schedule [GET]

For this GET request, it will return a list of all the sport schedule of the authenticated user.


+ Response 200(application/json)

        [
          {
            "name": "Sport schedule name",
            "weekdays": [
              2,
              4
            ],
            "time": "00:00:00-00:00",
            "is_active": true,
            "reminder_minutes": 15,
            "id": "00000000-0000-0000-0000-000000000000",
            "user_id": "00000000-0000-0000-0000-000000000000"
          }
        ]
    
### Add sport schedule [POST]

Adds a sport schedule for the authenticated user.

+ Request (application/json)

        {
            "name": "Sport schedule name",
            "weekdays": [
              2,
              4
            ],
            "time": "00:00:00-00:00",
            "is_active": true,
            "reminder_minutes": 15,
            "user_id": "00000000-0000-0000-0000-000000000000"
        }
        
+ Response 200

## Manage sport schedules [/sport_schedule/{id}]
+ Parameters
    + id: `00000000-0000-0000-0000-000000000000` (UUID) - The ID of a sport schedule.
    

### Change a sport schedule [PUT]

This will update a sport schedule with one or multiple fields for the authenticated user.

+ Request (application/json)

        {
            "name": "Sport schedule new name",
            "weekdays": [
              2,
              4,
              5
            ],
            "time": "00:00:00-00:00",
            "is_active": false,
            "reminder_minutes": 15,
            "user_id": "00000000-0000-0000-0000-000000000000"
        }
        
+ Response 200

### Delete a sport schedule [DELETE]

This will delete a sport schedule of the authenticated user.

+ Response 200


# Group Cardio Activity

This group is used for starting session activities and closing them with the session data.
It it also used for visualizing the user healthy.

## Get Cardio activities [/cardio_activity]
### Get cardio activity [GET]

This will return all cardio activity sessions of the user.

+ Response 200(application/json)

        [
          {
            "distance": null,
            "end_date": "00:00:00-00:00",
            "calories": null,
            "id": "00000000-0000-0000-0000-000000000000",
            "start_date": "00:00:00-00:00",
            "activity_id": "00000000-0000-0000-0000-000000000000",
            "is_active": true,
            "speed": null
          }
        ]
        
    
### Start a cardio activty [POST]

Start a new cardio activity session, this will require the user activity id

+ Request (application/json)

        {
            "activity_id": "00000000-0000-0000-0000-000000000000"
        }
        
+ Response 200

## Manage cardio activities [/cardio_activity/{id}]
+ Parameters
    + id: `00000000-0000-0000-0000-000000000000` (UUID) - The ID of a cardio activity.
    

### End a cardio activity [PUT]

This endpoint is used for ending a cardio activity. Here will be the session data be send to the API. 
The endate will be assigned by the API.

+ Request (application/json)

          {
            "distance": null,
            "calories": null,
            "start_date": "00:00:00-00:00",
            "activity_id": "00000000-0000-0000-0000-000000000000",
            "is_active": true,
            "speed": null
          }
        
+ Response 200

### Get a single cardio activity [GET]

This endpoint will return a single cardio activity.

+ Response 200(application/json)

          {
            "distance": null,
            "calories": null,
            "start_date": "00:00:00-00:00",
            "activity_id": "00000000-0000-0000-0000-000000000000",
            "is_active": true,
            "speed": null
          }
          
          
# Group Spotify

## Manage spotify playlist [/Spotify]
### Add track [POST]

Add a track to the playlist for a specific gym

+ Request (application/json)

        {
            "cliend_address": "00:00:00:00:00:00"
        }

+ Response 201(application/json)

### Remove track [DELETE]

Add a track to the playlist for a specific gym

+ Request (application/json)

        {
            "cliend_address": "00:00:00:00:00:00",
            "uri": "spotify:track:0xCmwofyCiXdhoBsMSNj2w",
        }

+ Response 204(application/json)

# Group Music preference

## Manage music preference [/music_preference]
### list music preference for user [GET]

get music preference for a user


+ Response 200(application/json)

        {
            "id": "00000000-0000-0000-0000-000000000000",
            "genre": "dance"
        }

### add music preference for user [POST]

Add a music preference for a user

+ Request (application/json)

        {
            "genre": "dance"
        }

+ Response 201(application/json)

### delete music preference for user [DELETE]

Delete a music preference for a user

+ Parameters
    + id: `00000000-0000-0000-0000-000000000000` (UUID) - The ID of a music preference.

+ Response 204(application/json)